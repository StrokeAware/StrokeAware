import React, { useState, useEffect } from 'react';
import { firestore } from './auth';
import { collection, addDoc, query, where, getDocs } from 'firebase/firestore';
import { Link, useNavigate } from 'react-router-dom';
import Swal from 'sweetalert2';
import './LoginRegister.css';

const PatientTopForm = () => {
  const navigate = useNavigate();

  const [formData, setFormData] = useState({
    name: '',
    surname: '',
    age: '',
    idCard: '',
    gender: '',
    disease: '',
    phone: '',
  });

  const [isSaved, setIsSaved] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [firebaseInitialized, setFirebaseInitialized] = useState(false);

  useEffect(() => {
    if (firestore) {
      setFirebaseInitialized(true);
    } else {
      console.error('Firestore instance is not available');
    }
  }, []);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const validateForm = () => {
    const errors = [];
    if (!formData.name.trim()) errors.push('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠');
    if (!formData.surname.trim()) errors.push('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏™‡∏Å‡∏∏‡∏•');
    if (!formData.age.trim() || isNaN(formData.age) || +formData.age <= 0) errors.push('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
    if (!formData.idCard.trim() || !/^\d{13}$/.test(formData.idCard.trim())) errors.push('‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ 13 ‡∏´‡∏•‡∏±‡∏Å');
    if (!formData.gender) errors.push('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏®');
    if (!formData.phone.trim() || !/^\d{10}$/.test(formData.phone.trim())) errors.push('‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ 10 ‡∏´‡∏•‡∏±‡∏Å');
    return errors;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!firebaseInitialized) {
      Swal.fire('‡∏£‡∏∞‡∏ö‡∏ö‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥', '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ', 'error');
      return;
    }

    setIsSubmitting(true);
    const validationErrors = validateForm();

    if (validationErrors.length > 0) {
      Swal.fire({
        title: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
        html: validationErrors.map(err => `‚Ä¢ ${err}`).join('<br>'),
        icon: 'error'
      });
      setIsSubmitting(false);
      return;
    }

    try {
      const q = query(collection(firestore, 'patients_topform'), where('idCard', '==', formData.idCard));
      const querySnapshot = await getDocs(q);

      if (!querySnapshot.empty) {
        Swal.fire({
          title: '‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥',
          text: '‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß',
          icon: 'error',
          confirmButtonText: '‡∏ï‡∏Å‡∏•‡∏á'
        });
        setIsSubmitting(false);
        return;
      }

      const now = new Date();
      const months = ['‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°','‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå','‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°','‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô','‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°','‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô','‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°','‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°','‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô','‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°','‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô','‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°'];
      const day = now.getDate();
      const monthName = months[now.getMonth()];
      const year = now.getFullYear() + 543;
      const hour = now.getHours().toString().padStart(2, '0');
      const minute = now.getMinutes().toString().padStart(2, '0');
      const formattedDate = `${monthName} ${day} ‡∏û.‡∏®. ${year}`;
      const formattedTime = `‡πÄ‡∏ß‡∏•‡∏≤ ${hour}:${minute} ‡∏ô.`;

      const docRef = await addDoc(collection(firestore, 'patients_topform'), {
        ...formData,
        fullName: `${formData.name} ${formData.surname}`,
        createdAt: new Date(),
        updatedAt: new Date(),
        formDate: formattedDate,
        formTime: formattedTime
      });

      localStorage.setItem('patientName', `${formData.name} ${formData.surname}`);
      localStorage.setItem('patientId', docRef.id);

      await Swal.fire({
        title: '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        text: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß',
        icon: 'success',
        confirmButtonText: '‡∏ï‡∏Å‡∏•‡∏á'
      }).then(() => {
        navigate('/BEFAST_MAIN_BALANCE');
      });

      setIsSaved(true);
    } catch (error) {
      console.error('Firestore error:', error);
      await Swal.fire({
        title: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
        text: `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ: ${error.message}`,
        icon: 'error',
        confirmButtonText: '‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÅ‡∏•‡πâ‡∏ß'
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="patient-form-container">
      <h2 className="form-title">ü©∫ ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à</h2>
      <form onSubmit={handleSubmit} className="patient-form">
        <div className="form-group">
          <label>‡∏ä‡∏∑‡πà‡∏≠</label>
          <input name="name" value={formData.name} onChange={handleChange} required />
        </div>
        <div className="form-group">
          <label>‡∏™‡∏Å‡∏∏‡∏•</label>
          <input name="surname" value={formData.surname} onChange={handleChange} required />
        </div>
        <div className="form-group">
          <label>‡∏≠‡∏≤‡∏¢‡∏∏</label>
          <input name="age" value={formData.age} onChange={handleChange} required type="number" min="1" />
        </div>
        <div className="form-group">
          <label>‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô (13 ‡∏´‡∏•‡∏±‡∏Å)</label>
          <input name="idCard" value={formData.idCard} onChange={handleChange} required pattern="\d{13}" />
        </div>
        <div className="form-group">
          <label>‡πÄ‡∏û‡∏®</label>
          <select name="gender" value={formData.gender} onChange={handleChange} required>
            <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏®</option>
            <option value="‡∏ä‡∏≤‡∏¢">‡∏ä‡∏≤‡∏¢</option>
            <option value="‡∏´‡∏ç‡∏¥‡∏á">‡∏´‡∏ç‡∏¥‡∏á</option>
          </select>
        </div>
        <div className="form-group">
          <label>‡πÇ‡∏£‡∏Ñ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)</label>
          <input name="disease" value={formData.disease} onChange={handleChange} />
        </div>
        <div className="form-group">
          <label>‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå (10 ‡∏´‡∏•‡∏±‡∏Å)</label>
          <input name="phone" value={formData.phone} onChange={handleChange} required pattern="\d{10}" />
        </div>
        <div className="button-detail-container">
          <button type="submit" className="submit-btn" disabled={isSubmitting}>
            {isSubmitting ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å...' : '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'}
          </button>
        </div>
      </form>
      {isSaved && (
        <div className="next-page-container">
          <Link to="/BEFAST_MAIN_BALANCE" className="next-page-btn">‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏ñ‡∏±‡∏î‡πÑ‡∏õ</Link>
        </div>
      )}
    </div>
  );
};

export default PatientTopForm;
